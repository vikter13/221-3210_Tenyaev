/* Libcxx.edl - EDL sample for trusted C++ library. */

enclave {
    
    /* 
     * A subset of the C++03 standard is supported.
     */

    trusted {
       
		public void ecall_lambdas_demo(void);
		public void ecall_auto_demo(void);
		public void ecall_decltype_demo(void);
		public void ecall_strongly_typed_enum_demo(void);
		public void ecall_range_based_for_loops_demo(void);
		public void ecall_static_assert_demo(void);
		public void ecall_virtual_function_control_demo(void);
		public void ecall_delegating_constructors_demo(void);
		public void ecall_std_function_demo(void);
		public void ecall_cxx11_algorithms_demo(void);
		public void ecall_variadic_templates_demo(void);
		public void ecall_SFINAE_demo(void);
		public void ecall_initializer_list_demo(void);
		public void ecall_rvalue_demo(void);
		public void ecall_nullptr_demo(void);
		public void ecall_new_container_classes_demo(void);
		public void ecall_tuple_demo(void);
		public void ecall_shared_ptr_demo(void);
		public void ecall_atomic_demo(void);
		public void ecall_mutex_demo(void);
		public void ecall_print_final_value_mutex_demo(void);
		public void ecall_mutex_demo_no_protection(void);
		public void ecall_print_final_value_no_protection(void);
		public void ecall_condition_variable_run(void);
		public void ecall_condition_variable_load(void);
		
    };
};
