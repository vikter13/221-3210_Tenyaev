/*
 *   Copyright(C) 2011-2018 Intel Corporation All Rights Reserved.
 *
 *   The source code, information  and  material ("Material") contained herein is
 *   owned  by Intel Corporation or its suppliers or licensors, and title to such
 *   Material remains  with Intel Corporation  or its suppliers or licensors. The
 *   Material  contains proprietary information  of  Intel or  its  suppliers and
 *   licensors. The  Material is protected by worldwide copyright laws and treaty
 *   provisions. No  part  of  the  Material  may  be  used,  copied, reproduced,
 *   modified, published, uploaded, posted, transmitted, distributed or disclosed
 *   in any way  without Intel's  prior  express written  permission. No  license
 *   under  any patent, copyright  or  other intellectual property rights  in the
 *   Material  is  granted  to  or  conferred  upon  you,  either  expressly,  by
 *   implication, inducement,  estoppel or  otherwise.  Any  license  under  such
 *   intellectual  property  rights must  be express  and  approved  by  Intel in
 *   writing.
 *
 *   *Third Party trademarks are the property of their respective owners.
 *
 *   Unless otherwise  agreed  by Intel  in writing, you may not remove  or alter
 *   this  notice or  any other notice embedded  in Materials by Intel or Intel's
 *   suppliers or licensors in any way.
 *
 */


#ifndef _NEW_
#define _NEW_

#include <sgx_defs.h>
#include <stddef.h>
#include <exception>

#ifdef _MSC_VER
# pragma warning( disable : 4290 )  // C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
#endif

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
namespace std
{
    typedef void (*new_handler)();  // The type of the function called when allocation fails.

#ifndef __NOTHROW_T_DEFINED
#define __NOTHROW_T_DEFINED
	struct nothrow_t {};            // placement new tag type to suppress exceptions
	const nothrow_t nothrow = {};   // constant for placement new tag
#endif
	/*
	 * The function to call when allocation fails.  By default, there is no
	 * handler and a bad allocation exception is thrown if an allocation fails.
	 */
	new_handler set_new_handler(new_handler handler) noexcept;
	new_handler get_new_handler() noexcept;
};

void* SGXAPI operator new (size_t);
void* SGXAPI operator new[](size_t);

void* SGXAPI operator new (size_t, const std::nothrow_t&) noexcept;
void* SGXAPI operator new (size_t, void*) noexcept;
void* SGXAPI operator new[] (size_t, const std::nothrow_t&) noexcept;
void* SGXAPI operator new[] (size_t, void*) noexcept;

void SGXAPI operator delete (void*) noexcept;
void SGXAPI operator delete (void*, const std::nothrow_t&) noexcept;
void SGXAPI operator delete (void*, void*) noexcept;
void SGXAPI operator delete(void* __p, size_t __sz) noexcept;
void SGXAPI operator delete[](void*) noexcept;
void SGXAPI operator delete[] (void*, const std::nothrow_t&) noexcept;
void SGXAPI operator delete[] (void*, void*) noexcept;
void SGXAPI operator delete[](void* __p, size_t __sz) noexcept;
#else
namespace std
{
    typedef void (*new_handler)();  // The type of the function called when allocation fails.

	struct nothrow_t {};            // placement new tag type to suppress exceptions
	const nothrow_t nothrow = {};   // constant for placement new tag

	/*
	 * The function to call when allocation fails.  By default, there is no
	 * handler and a bad allocation exception is thrown if an allocation fails.
	 */
	new_handler set_new_handler(new_handler handler) throw();
};

void* SGXAPI operator new (size_t) throw (std::bad_alloc);
void* SGXAPI operator new[](size_t) throw (std::bad_alloc);

void* SGXAPI operator new (size_t, const std::nothrow_t&) throw();
void* SGXAPI operator new (size_t, void*) throw();
void* SGXAPI operator new[] (size_t, const std::nothrow_t&) throw();
void* SGXAPI operator new[] (size_t, void*) throw();

void SGXAPI operator delete (void*) throw();
void SGXAPI operator delete (void*, const std::nothrow_t&) throw();
void SGXAPI operator delete (void*, void*) throw();
void SGXAPI operator delete[](void*) throw();
void SGXAPI operator delete[] (void*, const std::nothrow_t&) throw();
void SGXAPI operator delete[] (void*, void*) throw();
#endif
#endif /* _NEW_ */
